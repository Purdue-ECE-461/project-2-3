
if [[ "$1" == "install" ]]; 
then
  python3 -m venv venv
  echo "Created Virtual Environment"
  
  source venv/bin/activate
  echo "Installing Dependencies"
  venv/bin/pip install --upgrade pip
  venv/bin/pip install --upgrade --force-reinstall --no-cache-dir -r requirements.txt
  
  curl -O https://dl.google.com/dl/cloudsdk/channels/rapid/downloads/google-cloud-sdk-365.0.0-linux-x86_64.tar.gz
  tar -xf google-cloud-sdk-365.0.0-linux-x86_64.tar.gz
  ./google-cloud-sdk/install.sh -q
  ./google-cloud-sdk/bin/gcloud config set compute/zone us-east1-c
  ./google-cloud-sdk/bin/gcloud init
  
  bash -c "venv/bin/pip freeze -l | sed 's/==.*//g'" > requirements.txt
  echo "Dependencies Installed"
  deactivate
elif [[ "$1" == "installTest" ]];
then
  source venv/bin/activate
  
  venv/bin/pip install --upgrade nodeenv
  nodeenv -p
  npm install -g api-spec-converter
  npm audit fix --force
  venv/bin/api-spec-converter --from=openapi_3 --to=swagger_2 --syntax=yaml ECE*.yaml | awk 'NR==2{print "host: ece461-p2-t3.appspot.com"}1' > api1.yaml
  awk 'NR != 395' api1.yaml > tmpfile.yaml && mv tmpfile.yaml api2.yaml
  awk '!/summary/' api2.yaml > tmpfile.yaml && mv tmpfile.yaml ./api/api.yaml
  
  ./google-cloud-sdk/bin/gcloud endpoints services deploy api1.yaml
  ./google-cloud-sdk/bin/gcloud endpoints services deploy api2.yaml
  deactivate
  
elif [[ "$1" == "pylint" ]];
then
  source venv/bin/activate
  bash -c "find . \( -name venv -prune \) -o \( -name google-cloud-sdk -prune \) -o -name "*.py" -print | xargs pylint" >> pylintOut.txt
  deactivate
elif [[ "$1" == "deploy" ]];
then
  source venv/bin/activate
  bash -c "TZ=UTC date +'/%Y-%m-%d %H:%M:/,\$p' > date.txt"
  ./google-cloud-sdk/bin/gcloud app deploy ./package_moduleshelf/app.yaml --version=v1 --promote --quiet --stop-previous-version
  ./google-cloud-sdk/bin/gcloud endpoints services deploy ./api/api.yaml
  ./google-cloud-sdk/bin/gcloud app logs read --limit=100 > deployLog.txt
  sed -f date.txt -n deployLog.txt > deployLogRecent.txt
  deactivate
elif [[ "$1" == "deployLog" ]];
then
  ./google-cloud-sdk/bin/gcloud app logs read --limit=100 > deployLog.txt
  sed -f date.txt -n deployLog.txt > deployLogRecent.txt
elif [[ "$1" == "clean" ]];
then
  rm date.txt
  rm deployLog*
  rm -rf venv
  rm -rf packageTemp
  ./google-cloud-sdk/bin/gcloud endpoints services delete servicename
  rm -rf google-cloud-sdk
  rm -rf google-cloud-sdk-*.tar.*
  rm -rf ./api/api.yaml
fi
